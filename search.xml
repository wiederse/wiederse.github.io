<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 天梯赛 L2-3 锦标赛</title>
    <url>/2024/02/29/2023%E5%A4%A9%E6%A2%AF%E8%B5%9BL2-3%E9%94%A6%E6%A0%87%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://pintia.cn/problem-sets/994805046380707840/exam/problems/1649748772841508874?type=7&page=1">L2-047 锦标赛 - 团体程序设计天梯赛-练习集 (pintia.cn)</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>​	一开始一直想着从最后一轮开始倒序处理，但怎么都无法保证分配的合理性。遍历到前面的轮次可能会不满足。</p>
<p>​	正确思路如下，先根据第一轮败者完善答案的一半。下标从 $0$ 开始的话第 $1$ 轮比赛的第 $i$ 场败者，可以对应第 $i\times 2$ 名选手。</p>
<p>​	第 $i$ 轮比赛的第 $j$ 场的<strong>败者</strong>其可能与第 $i -1$ 轮比赛的第 $j \times 2$ 和 $j\times 2+1$ 的<strong>胜者</strong>比赛。如果其能力值比两者都小的话，没有答案。否则跟任意一个能力值比它小的即可，可以思考一下正确性。</p>
<p>​	为了实现构造还要建立一个数组，记录该败者该放在哪个位置，详细可见代码。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(x,y) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; #y &lt;&lt; <span class="string">&quot; = &quot;</span>&lt;&lt; y &lt;&lt; endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> uLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">131080</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">l</span>(k), <span class="built_in">nxt</span>(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="type">int</span> n = (<span class="number">1</span> &lt;&lt; (k - i - <span class="number">1</span>));</span><br><span class="line">        l[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        nxt[i].<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cin &gt;&gt; l[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    cin &gt;&gt; w;</span><br><span class="line">    <span class="keyword">if</span>(l[k - <span class="number">1</span>][<span class="number">0</span>] &gt; w) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">1</span> &lt;&lt; k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)); i++) &#123;</span><br><span class="line">        ans[i &lt;&lt; <span class="number">1</span>] = l[<span class="number">0</span>][i];</span><br><span class="line">        nxt[<span class="number">0</span>][i] = (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; (k - i - <span class="number">1</span>)); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l[i][j] &lt; l[i - <span class="number">1</span>][j * <span class="number">2</span>] &amp;&amp; l[i][j] &lt; l[i - <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No Solution\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> maxl = <span class="built_in">max</span>(&#123;l[i][j], l[i - <span class="number">1</span>][j * <span class="number">2</span>], l[i - <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>]&#125;);</span><br><span class="line">            <span class="keyword">if</span>(l[i][j] &gt;= l[i - <span class="number">1</span>][j * <span class="number">2</span>]) &#123;</span><br><span class="line">                ans[nxt[i - <span class="number">1</span>][j * <span class="number">2</span>]] = l[i][j];</span><br><span class="line">                nxt[i][j] = nxt[i - <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans[nxt[i - <span class="number">1</span>][j * <span class="number">2</span> + <span class="number">1</span>]] = l[i][j];</span><br><span class="line">                nxt[i][j] = nxt[i - <span class="number">1</span>][j * <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            l[i][j] = maxl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debug(nxt[k - 1][0]);</span></span><br><span class="line">    ans[nxt[k - <span class="number">1</span>][<span class="number">0</span>]] = w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; k); i++)</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define sunset</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> sunset</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法竞赛</category>
        <category>思维题</category>
      </categories>
  </entry>
  <entry>
    <title>F-命运的抉择_2024牛客寒假算法基础集训营6</title>
    <url>/2024/02/25/F-%E5%91%BD%E8%BF%90%E7%9A%84%E6%8A%89%E6%8B%A9-2024%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56/</url>
    <content><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/67746/F">F-命运的抉择_2024牛客寒假算法基础集训营6 (nowcoder.com)</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个长度为 $n(2\le n\le 10^5)$ 的数组 $a(1\le a_i\le 10^6)$，对每个 $a_i$ 将其添加进数组 $b$ 或数组 $c$​。要求 $b$ 和 $c$ 均非空，两个数组中各任取一个元素 $b_i,c_j$，均满足 $gcd(b_i,c_j)&#x3D;1$。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先用筛法预处理出 $10^6$ 范围内每个数的素因子。</p>
<p>然后采用并查集，如果两个数包含同一个素因子，那么它们就必须在同一个集合内。最终如果集合数小于 $2$，则无解。对于可行解，可以将一个集合放入数组 $b$，其余集合放入数组 $c$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug2(x,y) cout &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; #y &lt;&lt; <span class="string">&quot; = &quot;</span>&lt;&lt; y &lt;&lt; endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> uLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxa = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[maxn], f[maxn];</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; fac[<span class="number">1&#x27;000&#x27;001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        f[i] = i;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : fac[a[i]]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">find</span>(x) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                f[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(mp[x]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mp[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fir = <span class="number">0</span>, sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> f = <span class="built_in">find</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(!vis[f]) &#123;</span><br><span class="line">            vis[f] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(fir == <span class="number">0</span>) fir = f;</span><br><span class="line">            <span class="keyword">else</span> sec = f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!sec) cout &lt;&lt; <span class="string">&quot;-1 -1\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> lb = <span class="number">0</span>, lc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(i) == fir) lb++;</span><br><span class="line">            <span class="keyword">else</span> lc++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; lb &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; lc &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(i) == fir) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(i) != fir) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define sunset</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>)-&gt;<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> sunset</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= maxa; i++) <span class="keyword">if</span>(fac[i].<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= maxa; j += i) fac[j].<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>算法竞赛</category>
        <category>数论</category>
        <category>筛法</category>
        <category>数据结构</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>筛法</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>一些数论算法及证明</title>
    <url>/2024/01/25/%E4%B8%80%E4%BA%9B%E6%95%B0%E8%AE%BA%E7%AE%97%E6%B3%95%E5%8F%8A%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h2><p><strong>等式 1</strong> 如果 $a | b$ 且 $b|a$，那么 $a\pm b$ </p>
<p><strong>等式 2</strong> 如果 $d|a$ 且 $d|b$ 那么 $d|(ax + by)\ x,y \in Z$</p>
<p><strong>等式 3</strong> $a\bmod\ n &#x3D; a - n⌊\frac{a}{n}⌋$; a∈Z,n∈N*(正整数)</p>
<p><strong>推论 1</strong> 对任意整数 $a$ , $b$，如果 $d|a$ 且 $d|b$ 则 $d|gcd(a, b)$</p>
<p>如果我们想要获得结论 $gcd(a,\ b) &#x3D; gcd(b,\ a\bmod\ b)$</p>
<p>那么我们只需要证明 $gcd(a,b)|gcd(b, a\bmod b)$ 且 $gcd(b,a\bmod b)|gcd(a,b)$ 就可以来证明它俩相等了。</p>
<h3 id="证明-gcd-a-b-gcd-b-a-bmod-b"><a href="#证明-gcd-a-b-gcd-b-a-bmod-b" class="headerlink" title="证明 $gcd(a,b)|gcd(b,a\bmod b)$"></a>证明 $gcd(a,b)|gcd(b,a\bmod b)$</h3><blockquote>
<p>设 $d &#x3D; gcd(a, b)$<br>$∴ d|a 且 d|b$<br>由 <strong>等式 3</strong> 可知：$(a\bmod\ b) &#x3D; a - qb\quad q &#x3D; ⌊a&#x2F;b⌋$<br>$∴ a\bmod\ b$ 是 a 与 b 的<strong>线性组合</strong><br>由 <strong>等式 2</strong> 可知 ：$d|(a\bmod\ b)$<br>∵ $d|b$ 且 $d|(a\bmod\ b)$<br>∴ 由 <strong>推论 1</strong> 可知 $d|gcd(b, a\bmod\ b)$<br><strong>等价结论：</strong> $gcd(a, b)|gcd(b, a\bmod\ b)$</p>
</blockquote>
<h3 id="证明-gcd-b-a-bmod-b-gcd-a-b"><a href="#证明-gcd-b-a-bmod-b-gcd-a-b" class="headerlink" title="证明 $gcd(b,a\bmod\ b)|gcd(a,b)$"></a>证明 $gcd(b,a\bmod\ b)|gcd(a,b)$</h3><blockquote>
<p>设 $c &#x3D; gcd(b, a\bmod\ b)$<br>∴ $c|b 且 c|(a\bmod\ b)$<br>∵ $a &#x3D; qb + r$<br>$r &#x3D; a\bmod\ b$<br>$q &#x3D; ⌊\frac{a}{b}⌋$<br>∴ $a$ 是 $b$ 和 $(a\bmod\ b)$ 的<strong>线性组合</strong><br>∴ 由 <strong>等式 2</strong> 可知：$c|a$<br>∵ $c|a$ 且 $c|b$<br>∴ 由 <strong>推论 1</strong> 可知：$c|gcd(a, b)$<br><strong>等价结论：</strong> $gcd(b, a\bmod\ b)|gcd(a, b)$</p>
</blockquote>
<h3 id="证明-gcd-a-b-gcd-b-a-bmod-b-1"><a href="#证明-gcd-a-b-gcd-b-a-bmod-b-1" class="headerlink" title="证明 $gcd(a,b) &#x3D; gcd(b, a\bmod b)$"></a>证明 $gcd(a,b) &#x3D; gcd(b, a\bmod b)$</h3><blockquote>
<p>由 上述两个结论 可知：<br>$gcd(a, b)|gcd(b, a\bmod\ b)$<br>$gcd(b, a\bmod\ b)|gcd(a, b)$<br>∴ 由 <strong>等式 1</strong> 可知：<br>$gcd(a, b) &#x3D; gcd(b, a\bmod\ b)$</p>
</blockquote>
<h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><ul>
<li>求 $ax+by&#x3D;gcd(a,b)$</li>
</ul>
<p>设</p>
<p>$ax_1+by_1&#x3D;\gcd(a,b)$</p>
<p>$bx_2+(a\bmod b)y_2&#x3D;\gcd(b,a\bmod b)$</p>
<p>由欧几里得定理可知：$\gcd(a,b)&#x3D;\gcd(b,a\bmod b)$</p>
<p>所以 $ax_1+by_1&#x3D;bx_2+(a\bmod b)y_2$</p>
<p>又因为 $a\bmod b&#x3D;a-\lfloor\frac{a}{b}\rfloor\times b$</p>
<p>所以<br>$$<br>ax_1+by_1&#x3D;bx_2+(a-\lfloor\frac{a}{b}\rfloor\times b)y_2<br>$$<br>$ax_1+by_1&#x3D;ay_2+bx_2-\lfloor\frac{a}{b}\rfloor\times by_2&#x3D;ay_2+b(x_2-\lfloor\frac{a}{b}\rfloor y_2)$</p>
<p>$a,b$ 相同，所以 $x_1&#x3D;y_2,y_1&#x3D;x_2-\lfloor\frac{a}{b}\rfloor y_2$</p>
<p>将 $x_2,y_2$ 不断代入递归求解直至 $\gcd$（最大公约数，下同）为 <code>0</code> 递归 <code>x=1,y=0</code> 回去求解。</p>
<details class="note info no-icon"><summary><p>code</p>
</summary>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, x, y);</span><br><span class="line">  <span class="type">int</span> t = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = t - (a / b) * y;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="同余方程"><a href="#同余方程" class="headerlink" title="同余方程"></a>同余方程</h2><p>求关于 $ x$ 的同余方程 $ a x \equiv 1 \pmod {b}$ 的最小正整数解。</p>
<p>对于 $100%$ 的数据，$2 ≤a, b≤ 2,000,000,000$。</p>
<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><p>$ax\bmod\ b&#x3D;1$ 实质是 $ax+by&#x3D;1$。 $y$ 是我们引入的某个整数，这里似乎是个负数。</p>
<p>扩展欧几里得求 $ax+by&#x3D;gcd(a,b)$，所以这里 $gcd(a,b)&#x3D;1$，即 $a$，$b$ 互质。所以 $a$ 有模 $b$ 下的乘法逆元的条件为 $a$，$b$ 互质。</p>
<p>我们将要求出来的 $x$， $y$ 仅仅保证满足 $ax+by&#x3D;1$，而 $x$ 不一定是最小正整数解。有可能太大，也有可能是负数。$x$ 批量的减去或加上 $b$，能保证 $ax+by&#x3D;1$。因为：<br>$$<br>a(x+kb)+b(y-ka)&#x3D;1<br>$$<br>这里我们可以这么写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">x = (x % b + b) % b</span><br></pre></td></tr></table></figure>



<h2 id="二元一次不定方程"><a href="#二元一次不定方程" class="headerlink" title="二元一次不定方程"></a>二元一次不定方程</h2><p><a href="https://www.luogu.com.cn/problem/P5656">P5656 【模板】二元一次不定方程 (exgcd) - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a><br>$$<br>ax+by&#x3D;c<br>$$<br>$gcd(a,b)|(ax+by)$，若 $c$ 不是 $gcd(a,b)$ 的倍数直接无解</p>
<p>记 $ax+by&#x3D;gcd(a,b)$ 的一组特解为 $x_0$，$y_0$。则有<br>$$<br>ax_0+by_0&#x3D;gcd(a,b) \<br>a\frac{x_0c}{gcd(a,b)}+b\frac{y_0c}{gcd(a,b)}&#x3D;c<br>$$<br>故我们已经找到原方程的一组整数特解，记为 $x_1$ 和 $y_1$<br>$$<br>x_1&#x3D;\frac{x_0c}{gcd(a,b)}\quad y_1&#x3D;\frac{y_0c}{gcd(a,b)}<br>$$<br>那么我们考虑构造原方程整数通解形式</p>
<p>我们设任意 $d\in Q$，那么必有<br>$$<br>a(x_1+db)+b(y_1-da)&#x3D;c<br>$$<br>显然对于最小的 $db$，$da$，$d&#x3D;\frac{1}{gcd(a,b)}$</p>
<p>然后像上面一样开始乱搞</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> d = <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line"><span class="keyword">if</span>(c % d) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = c * x / d, y = c * y / d;</span><br><span class="line"><span class="type">int</span> dx = b / d, dy = a / d;</span><br><span class="line"><span class="type">int</span> minx = (x % dx + dx) % dx;</span><br><span class="line"><span class="keyword">if</span>(minx == <span class="number">0</span>) minx = dx;</span><br><span class="line"><span class="type">int</span> maxy = (c - a * minx) / b;</span><br><span class="line"><span class="type">int</span> miny = (y % dy + dy) % dy;</span><br><span class="line"><span class="keyword">if</span>(miny == <span class="number">0</span>) miny = dy;</span><br><span class="line"><span class="type">int</span> maxx = (c - b * miny) / a;</span><br></pre></td></tr></table></figure>

<h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="模数不互质的情况"><a href="#模数不互质的情况" class="headerlink" title="模数不互质的情况"></a>模数不互质的情况</h3><p>设两个方程分别是 $x\equiv a_1\ (mod\ m_1)$、$x\equiv a_2\ (mod\ m_2)$；</p>
<p>将它们转化为不定方程：$x&#x3D;m_1p+a_1&#x3D;m_2q+a_2$，其中 $p, q$ 是整数，则有 $m_1p-m_2q&#x3D;a_2-a_1$。</p>
<p>由裴属定理，当 $a_2-a_1$ 不能被 $gcd(m_1,m_2)$ 整除时，无解；</p>
<p>其他情况下，可以通过扩展欧几里得算法解出来一组可行解 $(p,q)$；</p>
<p>则原来的两方程组的模方程组的解为 $x\equiv b\ (mod\ M)$，其中 $b&#x3D;m_1p+a_1$, $M&#x3D;lcm(m_1,m_2)$。</p>
<h2 id="Lucas-定理"><a href="#Lucas-定理" class="headerlink" title="Lucas 定理"></a>Lucas 定理</h2><p>对于质数 $p$，有<br>$$<br>\binom{n}{m}\bmod p&#x3D;\binom{\lfloor\frac{n}{p}\rfloor}{\lfloor\frac{m}{p}\rfloor}\cdot\binom{n\bmod p}{m\bmod p}\bmod p<br>$$<br>观察上述表达式，可知 $n\bmod p$ 和 $m\bmod p$ 一定是小于 $p$的数，可以直接求解，$\displaystyle\binom{\left\lfloor\frac{n}{p}\right\rfloor}{\left\lfloor\frac{m}{p}\right\rfloor}$ 可以继续用 Lucas 定理求解。这也就要求 $p$ 的范围不能够太大，一般在 $10^5$ 左右。边界条件：当 $m&#x3D;0$ 的时候，返回 $1$。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>考虑 $\displaystyle\binom{p}{n} \bmod p$ 的取值，注意到 $\displaystyle\binom{p}{n} &#x3D; \frac{p!}{n!(p-n)!}$，分子的质因子分解中 $p$ 的次数恰好为 $1$，因此只有当 $n &#x3D; 0$ 或 $n &#x3D; p$ 的时候 $n!(p-n)!$ 的质因子分解中含有 $p$，因此 $\displaystyle\binom{p}{n} \bmod p &#x3D; [n &#x3D; 0 \vee n &#x3D; p]$。进而我们可以得出</p>
<p>$$<br>\begin{align} (a+b)^p &amp;&#x3D; \sum_{n&#x3D;0}^p \binom pn a^n b^{p-n}\ &amp;\equiv \sum_{n&#x3D;0}^p [n&#x3D;0\vee n&#x3D;p] a^n b^{p-n}\ &amp;\equiv a^p + b^p \pmod p \end{align}<br>$$<br>注意过程中没有用到费马小定理，因此这一推导不仅适用于整数，亦适用于多项式。因此我们可以考虑二项式 $f^p(x)&#x3D;(ax^n + bx^m)^p \bmod p$ 的结果</p>
<p>$$<br>\begin{align} (ax^n + bx^m)^p &amp;\equiv a^p x^{pn} + b^p x^{pm} \ &amp;\equiv ax^{pn} + bx^{pm}\ &amp;\equiv f(x^p) \end{align}<br>$$</p>
<blockquote>
<p>note: $a^{(p-1)}\equiv 1\pmod{p}$</p>
</blockquote>
<p>考虑二项式 $(1+x)^n \bmod p$，那么 $\displaystyle\binom n m$ 就是求其在 $x^m$ 次项的取值。使用上述引理，我们可以得到<br>$$<br>\begin{align} (1+x)^n &amp;\equiv (1+x)^{p\lfloor n&#x2F;p \rfloor} (1+x)^{n\bmod p}\ &amp;\equiv (1+x^p)^{\lfloor n&#x2F;p \rfloor} (1+x)^{n\bmod p} \end{align}<br>$$</p>
<p>注意前者只有在 $p$ 的倍数位置才有取值，而后者最高次项为 $n\bmod p \le p-1$，因此这两部分的卷积在任何一个位置只有最多一种方式贡献取值，即在前者部分取 $p$ 的倍数次项，后者部分取剩余项，即 $\displaystyle\binom{n}{m}\bmod p &#x3D; \binom{\left\lfloor n&#x2F;p \right\rfloor}{\left\lfloor m&#x2F;p\right\rfloor}\cdot\binom{n\bmod p}{m\bmod p}\bmod p$。</p>
<h2 id="扩展-Lucas定理"><a href="#扩展-Lucas定理" class="headerlink" title="扩展 Lucas定理"></a>扩展 Lucas定理</h2><p><a href="https://www.luogu.com.cn/blog/wohaocaia/solution-p4720">扩展Lucas定理 - HorizonWind 的博客 - 洛谷博客 (luogu.com.cn)</a></p>
<h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>若 $f$ 是算数函数，$F$ 为 $f$ 的和函数，对任意正整数 $n$，满足 $F(n)&#x3D;\sum_{d\mid n}f(d)$，则有 $f(n)&#x3D;\sum_{d\mid n}\mu(d)F(\frac{n}{d})$</p>
<p>证明：</p>
<p>$i\mid\frac{n}{d}\iff id\mid n\iff d\mid \frac{n}{i}$<br>$$<br>\begin{align}<br>\sum_{d\mid n}\mu(d)F(\frac{n}{d})&amp;&#x3D;\sum_{d\mid n}\mu(d)\sum_{i\mid\frac{n}{d}}f(i) \<br>&amp;&#x3D;\sum_{i\mid n}f(i)\sum_{d\mid\frac{n}{i}}\mu(d)<br>\end{align}<br>$$</p>
<p>当 $\frac{n}{i}$ 为 $1$ 的时候，$\sum_{d\mid\frac{n}{i}}\mu(d)&#x3D;1$，其它均为 $0$。</p>
<p>所以</p>
<p>$$<br>\sum_{d\mid n}\mu(d)F(\frac{n}{d})&#x3D;f(n)<br>$$</p>
<hr>
<p>若 $F(n)&#x3D;\sum_{n\mid d}f(d)$，则 $f(n)&#x3D;\sum_{n\mid d}\mu(\frac{d}{n})F(d)$</p>
<p>证明：<br>$$<br>\sum_{n\mid d}\mu(\frac{d}{n})F(d)&#x3D;\sum_{n\mid d}\mu(\frac{d}{n})\sum_{d\mid i}f(i)<br>$$<br>$n\mid d$，设 $d’&#x3D;\frac{d}{n}$，$d&#x3D;d’n$</p>
<p>$d\mid i$，则 $d’n\mid i$，即 $d’\mid \frac{i}{n}$<br>$$<br>\sum_{n\mid d}\mu(\frac{d}{n})\sum_{d\mid i}f(i)&#x3D;\sum_{n\mid i}f(i)\sum_{d’\mid\frac{i}{n}}\mu(d’)<br>$$<br>当 $\frac{i}{n}$ 为 $1$，即 $i&#x3D;n$ 时，$\sum_{d’\mid\frac{i}{n}}\mu(d’)&#x3D;1$，其余均为 $0$</p>
<p>所以</p>
<p>$$<br>\sum_{n\mid d}\mu(\frac{d}{n})F(d)&#x3D;f(n)<br>$$</p>
<h3 id="反演结论"><a href="#反演结论" class="headerlink" title="反演结论"></a>反演结论</h3><p>$$<br>d(ij)&#x3D;\sum_{x\mid i}\sum_{y\mid j}[\gcd(x,y)&#x3D;1]<br>$$</p>
]]></content>
      <categories>
        <category>算法竞赛</category>
        <category>数论</category>
      </categories>
  </entry>
</search>
